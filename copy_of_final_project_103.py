# -*- coding: utf-8 -*-
"""Copy_of_Final_Project_103.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h0_UvJnegP3JUN67pymToiGtN3uIfg4-
"""

import cv2
import matplotlib.pyplot as plt
import numpy as np

"""**(1) Video Acquisition**"""

cap = cv2.VideoCapture("Match1comp.mp4")

"""**(2) Video Frames**"""

i=0
frames = []
for i in range(3000):
  ret, frame = cap.read()
  if ret == False:
    break
  f = cv2.imwrite("frame" + str(i) + ".jpg", frame)
  f1 = cv2.imread('frame' + str(i) + ".jpg")
  f2 = cv2.cvtColor(f1, cv2.COLOR_BGR2RGB)
  frames.append(f2)
  i += 1

"""**(3) Region Labeling**"""

#the middle side

lower = np.array([155,165,100])
upper = np.array([190,215,170])
#for frame in range(len(frames)):
maskC = cv2.inRange(frames[0], lower, upper).copy()



for pic in range(100):
  plt.imshow(maskC)
  plt.show()
  z = 0
  sum=0
  h = []
  bbb=[]
  for b in range(265,275):
    h.append(b)
    z += 1

  for i in range(300,maskC.shape[0]-300):
    c=0
    count=0
    for j in range(300,maskC.shape[1]-300):
      if maskC[i][j]==255:
        for a in range(len(h)):
          if maskC[i][j+h[a]]==255 and maskC[i][j-h[a]]==255:
            bbb.append(1)


  for ccc in range(len(bbb)):
    sum+=bbb[ccc]
  if sum<10:
    print("middle")
  elif q=="Left":
    print("left")

#left side

lower = np.array([155,165,100])
upper = np.array([190,215,170])
#for frame in range(len(frames)):
mask = cv2.inRange(frames[0], lower, upper).copy()

for pic in range(900,950):
  mask = cv2.inRange(frames[pic], lower, upper).copy()
  plt.imshow(mask)
  plt.show()
  z = 0
  sum=0
  h = []
  bbb=[]
  for b in range(60,80):
    h.append(b)
    z += 1
  # print(h)

  for i in range(80,maskC.shape[0]-80):
    c=0
    count=0
    for j in range(80,maskC.shape[1]-80):
      if maskC[i][j]==255:
        for a in range(len(h)):
          if maskC[i][j+75]==255 and maskC[i][j-75]!=255:

            bbb.append(1)
  for ccc in range(len(bbb)):
    sum+=bbb[ccc]
  if sum>5:
    print("left")
  else:
    print("right")

z = 0
sum=0
h = []
bbb=[]
ccccc=0
for b in range(260,270):
  h.append(b)
z += 1
lower = np.array([155,165,100])
upper = np.array([190,215,170])
#for frame in range(len(frames)):
mask = cv2.inRange(frames[500], lower, upper).copy()
plt.imshow(mask)
plt.show()
for i in range(280,maskC.shape[0]-281):
  cright=0
  clift=0
  cou=0
  for j in range(280,maskC.shape[1]-281):
    if maskC[i][j]==255:
      for a in range(len(h)):
        ccc=j+h[a]
        cccc=j-h[a]
        cropright= maskC[i-2+i+3,ccc-2:ccc+2]
        croplift = maskC[i-2+i+3,cccc-2:ccc+2]

      for append0 in range(cropright.shape[0]):
        for append1 in range(cropright.shape[1]):

          cou += 1
          if cropright[append0][append1] == 255:
            cright+=1
          if croplift[append0][append1] == 255:
            clift+=1

      if cright!=cou and ccccc<=1:

            print("t")
            ccccc+=2

"""**(4) Team Labeling**"""

def calculate_distance(center1, center2):
    x1, y1 = center1
    x2, y2 = center2
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

# Yellow Team
lower_yellow_team = np.array([130,137,25])
upper_yellow_team = np.array([170,165,80])

#for f in range(5):
mask_team2 = cv2.inRange(frames[80], lower_yellow_team , upper_yellow_team).copy()
plt.imshow(mask_team2)
plt.show()

yellow_players_centers = []

Y_distance_threshold = 55  # Adjust this threshold as per your requirements

for i in range(mask_team2.shape[0]):
    for j in range(mask_team2.shape[1]):
        if mask_team2[i, j] == 255:
            count = 0
            for k in range(i - 25, i + 26):
                for l in range(j - 25, j + 26):
                    if 0 <= k < mask_team2.shape[0] and 0 <= l < mask_team2.shape[1]:
                        if mask_team2[k, l] == 255:
                            count += 1

            if count >= 10 and mask_team2[i, j] == 255:
                player_center = (j, i)
                should_add = True
                for existing_center in yellow_players_centers:
                    if calculate_distance(existing_center, player_center) <= Y_distance_threshold:
                        should_add = False
                        break
                if should_add:
                    yellow_players_centers.append(player_center)

for center in yellow_players_centers:
    cv2.circle(mask_team2, center, 26, (255, 0, 0), 2)

plt.imshow(mask_team2)
plt.show()

# Red team
lower_red_team = np.array([87, 13, 10])
upper_red_team = np.array([160,43,100])
#for f in range(11):
mask_red_team = cv2.inRange(frames[2500], lower_red_team, upper_red_team).copy()
plt.imshow(mask_red_team)
plt.show()

import math

red_players_centers = []

R_distance_threshold = 50

for i in range(mask_red_team.shape[0]):
    for j in range(mask_red_team.shape[1]):
        if mask_red_team[i, j] == 255:
            count = 0
            for k in range(i - 25, i + 26):
                for l in range(j - 25, j + 26):
                    if 0 <= k < mask_red_team.shape[0] and 0 <= l < mask_red_team.shape[1]:
                        if mask_red_team[k, l] == 255:
                            count += 1

            if count >= 5 and mask_red_team[i, j] == 255:
                player_center = (j, i)
                should_add = True
                for existing_center in red_players_centers:
                    if calculate_distance(existing_center, player_center) <= R_distance_threshold:
                        should_add = False
                        break
                if should_add:
                    red_players_centers.append(player_center)

for center in red_players_centers:
    cv2.circle(mask_red_team, center, 26, (220, 20, 60), 2)

plt.imshow(mask_red_team)
plt.show()

"""**(5) Ball Labeling**"""

#crop around ball

mask_ball2 = mask_ball[201:203, 360:362]
plt.imshow(mask_ball2)
plt.show()

#range ball
lower_ball = 150, 235, 190
upper_ball = 255, 255, 238

mask_ball = cv2.inRange(frames[50], lower_ball, upper_ball).copy()
plt.imshow(mask_ball)
plt.show()

# for f in range(11):
#   mask22 = cv2.inRange(frames[f], lower_ball  , upper_ball).copy()
#   plt.imshow(mask22)
#   plt.show()

# Ball in the next frames

# Xlow = 198
# Xhigh = 205
# Ylow = 358
# Yhigh = 362
Xlow = 201
Xhigh = 203
Ylow = 360
Yhigh = 362

for x in range(50, 80):
    mask_ballF = cv2.inRange(frames[x], lower_ball, upper_ball).copy()

    for Xpixel in range(Xlow - 10, Xhigh + 10):
      for Ypixel in range(Ylow - 10, Yhigh + 10):

        if mask_ballF[Xpixel][Ypixel] == 255:
           Xlow = Xpixel - 5
           Xhigh = Xpixel + 5
           Ylow = Ypixel - 5
           Yhigh = Ypixel + 5

    new_mask_ballF = mask_ballF[Xlow : Xhigh,  Ylow : Yhigh]
    print(Xlow , Xhigh,  Ylow , Yhigh)

    plt.imshow(new_mask_ballF)
    plt.show()

"""**(6) Dense Counting**"""

width = frames[-10].shape[1]

cx = width //4
height = frames[-10].shape[0]

cy = height //3
crops = []

x = 0
y = 0

for i in range(3):
  for c in range(4):
    t= frames[-10 ][y:y+cy , x:x+cx ]
    cc=1
    crops.append(t)
    x = x + cx

  y=y+cy
  x=0


f, axarr = plt.subplots(3,4)
for vv in range(3):
  for j in range(4):
    v = (4*vv) + j
    axarr[vv][j].imshow(crops[v])

plt.show()

num_of_yellow_players = 0
Y_player_distance_threshold = 50

for cro in range(len(crops)):
    maskcrop = cv2.inRange(crops[cro], lower_yellow_team, upper_yellow_team).copy()
    count = 0
    player_centers = []  # Track player centers in each crop
    for i in range(maskcrop.shape[0]):
        for j in range(maskcrop.shape[1]):
            c = 0
            if maskcrop[i][j] == 255:
                crop_2 = maskcrop[i - 5: i + 6, j - 5: j + 6]
                for fr1 in range(crop_2.shape[0]):
                    for fr2 in range(crop_2.shape[1]):
                        if crop_2[fr1][fr2] == 255:
                            c += 1
                if c > 0:
                    player_center = (j, i)
                    should_count = True
                    for existing_center in player_centers:
                        if calculate_distance(existing_center, player_center) <= Y_player_distance_threshold:
                            should_count = False
                            break
                    if should_count:
                        count += 1
                        player_centers.append(player_center)

    print(f"There are {count} yellow players in crop number", cro + 1)
    num_of_yellow_players += count

print(f"Total number of yellow players in this frame: {num_of_yellow_players}")

num_of_red_players = 0
R_player_distance_threshold = 50

for cro in range(len(crops)):
    maskcrop = cv2.inRange(crops[cro], lower_red_team, upper_red_team).copy()
    count = 0
    player_centers = []
    for i in range(maskcrop.shape[0]):
        for j in range(maskcrop.shape[1]):
            c = 0
            if maskcrop[i][j] == 255:
                crop_2 = maskcrop[i - 5: i + 6, j - 5: j + 6]
                for fr1 in range(crop_2.shape[0]):
                    for fr2 in range(crop_2.shape[1]):
                        if crop_2[fr1][fr2] == 255:
                            c += 1
                if c > 0:
                    player_center = (j, i)
                    should_count = True
                    for existing_center in player_centers:
                        if calculate_distance(existing_center, player_center) <= R_player_distance_threshold:
                            should_count = False
                            break
                    if should_count:
                        count += 1
                        player_centers.append(player_center)

    print(f"There are {count} red players in crop number", cro + 1)
    num_of_red_players += count

print(f"Total number of red players in this frame: {num_of_red_players}")

for cro in range(len(crops)):
  end=0
  lower_teamy = np.array([130,137,25])
  upper_teamy = np.array([200,175,85])

  maskcrop = cv2.inRange(crops[cro], lower_teamy, upper_teamy).copy()
  for i in range(maskcrop.shape[0]):
   for j in range(maskcrop.shape[1]):
     if maskcrop[i][j] == 255 and end<1:
      crop = maskcrop[i-1:i+2, j-1:j+2]
      count = 0
      c = 0
      for append0 in range(crop.shape[0]):
        for append1 in range(crop.shape[1]):
          count += 1
          if crop[append0][append1] == 255:
            c += 1

      if c == count or count-5<c<=count:
        end+=1


        print("there are yellow player",cro+1)

for cro in range(len(crops)):
  end=0
  lower_team1 = np.array([87, 13, 10])
  upper_team1 = np.array([160,43,100])
  maskcrop = cv2.inRange(crops[cro], lower_team1, upper_team1).copy()
  for i in range(maskcrop.shape[0]):
   for j in range(maskcrop.shape[1]):
     if maskcrop[i][j] == 255 and end<1:
      crop = maskcrop[i-1:i+2, j-1:j+2]
      count = 0
      c = 0
      for append0 in range(crop.shape[0]):
        for append1 in range(crop.shape[1]):
          count += 1
          if crop[append0][append1] == 255:
            c += 1

      if c == count or count-5<c<=count:
        end+=1

        print("there are red player",cro+1)